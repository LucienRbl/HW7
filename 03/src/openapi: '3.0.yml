openapi: '3.0.3'
info:
  title: Travel Agency API
  version: '1.0'
  description: API for a travel agency to manage tours and customers
servers:
  - url: http://t-a.org
tags:
  - name: tours
    description: Operations about tours
  - name: customers
    description: Operations about customers
  - name: reservations
    description: Operations about reservations
  
paths:
# Tours
  /tours:
    get:
      summary: Get all tours
      operationId: getToursList
      tags:
        - tours
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tours:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tour'
                  links:
                      type: array
                      items:
                        $ref: '#/components/schemas/Link'
          links:
            create tours:
              operationId: createTour
              description: >
                The `createTour` operation can be used to create a new tour.
            tour details:
              operationId: getTourById
              parameters:
                tourId: '$response.body#/tours/0/id'
              description: >
                The `id` of the first tour in the response body can be used as 
                the `tourId` parameter in `GET /tours/{tourId}` to retrieved the tour details.
    post:
      summary: Create a tour
      operationId: createTour
      tags:
        - tours
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tour'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: ID of the created Tour.
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            getTourById:
              operationId: getTourById
              parameters:
                tourId: '$response.body#/id'
              description: >
                The `id` of the created tour in the response body can be used as 
                the `tourId` parameter in `GET /tours/{tourId}` to retrieved the created tour.
  /tours/filters:
    get:
      summary: Get tours with filters
      operationId: getToursByFilters
      tags:
        - tours
      parameters:
        - name: locationId
          in: query
          required: false
          schema:
            type: integer
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: availability
          in: query
          required: false
          schema:
            type: boolean
        - name: priceMax
          in: query
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tours:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tour'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            create tours:
              operationId: createTour
              description: >
                The `createTour` operation can be used to create a new tour.
            tour details:
              operationId: getTourById
              parameters:
                tourId: '$response.body#/tours/0/id'
              description: >
                The `id` of the first tour in the response body can be used as 
                the `tourId` parameter in `GET /tours/{tourId}` to retrieved the tour details.
        '400':
          description: Bad Request
  /tour/{tourId}:
    get:
      summary: Get a tour by ID
      operationId: getTourById
      tags:
        - tours
      parameters:
        - name: tourId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tour:
                    $ref: '#/components/schemas/Tour'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            updateTour:
              operationId: updateTour
              parameters:
                tourId: '$response.body#/tour/id'
              description: >
                The `id` of the tour in the response body can be used as 
                the `tourId` parameter in `PUT /tour/{tourId}` to update the tour.
            deleteTour:
              operationId: deleteTour
              parameters:
                tourId: '$response.body#/tour/id'
              description: >
                The `id` of the tour in the response body can be used as 
                the `tourId` parameter in `DELETE /tour/{tourId}` to delete the tour.
        '404':
          description: 'Not Found'
    put:
      summary: Update a tour by ID
      operationId: updateTour
      tags:
        - tours
      parameters:
        - name: tourId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tour'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tour:
                    $ref: '#/components/schemas/Tour'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            getTourById:
              operationId: getTourById
              parameters:
                tourId: '$response.body#/tour/id'
              description: >
                The `id` of the updated tour in the response body can be used as 
                the `tourId` parameter in `GET /tour/{tourId}` to retrieved the updated tour. 
        '404':
          description: 'Not Found'
        '422':
          description: 'Validation Error'        
    delete:
      summary: Delete a tour by ID
      operationId: deleteTour
      tags:
        - tours
      parameters:
        - name: tourId
          description: ID of the tour to delete
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Tour deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tour deleted successfully."
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            createTour:
              operationId: createTour
              description: >
                The `createTour` operation can be used to create a new tour.  
        '404':
          description: Not Found
# Customers
  /customers:
    get:
      summary: Get all customers
      operationId: getCustomersList
      tags:
        - customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  customers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            createCustomer:
              operationId: createCustomer
              description: >
                The `createCustomer` operation can be used to create a new customer.
            getCustomerById:
              operationId: getCustomerById
              parameters:
                customerId: '$response.body#/customers/0/id'
              description: >
                The `id` of the first customer in the response body can be used as 
                the `customerId` parameter in `GET /customers/{customerId}` to retrieved the customer details.
    post:
      summary: Create a customer
      operationId: createCustomer
      tags:
        - customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: ID of the created Customer.
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            getCustomerById:
              operationId: getCustomerById
              parameters:
                customerId: '$response.body#/id'
              description: >
                The `id` of the created customer in the response body can be used as 
                the `customerId` parameter in `GET /customers/{customerId}` to retrieved the created customer.
  /customers/findByName:
    get:
      summary: Get a customer by name
      operationId: getCustomerByName
      tags:
        - customers
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  customers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            getCustomerById:
              operationId: getCustomerById
              parameters:
                customerId: '$response.body#/customers/0/id'
              description: >
                The `id` of the first customer in the response body can be used as 
                the `customerId` parameter in `GET /customers/{customerId}` to retrieved the customer details.
        '404':
          description: 'Not Found'
  /customer/{customerId}:
    get:
      summary: Get a customer by ID
      operationId: getCustomerById
      tags:
        - customers
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  customer:
                    $ref: '#/components/schemas/Customer'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            updateCustomer:
              operationId: updateCustomer
              parameters:
                customerId: '$response.body#/customer/id'
              description: >
                The `id` of the customer in the response body can be used as 
                the `customerId` parameter in `PUT /customer/{customerId}` to update the customer.
            deleteCustomer:
              operationId: deleteCustomer
              parameters:
                customerId: '$response.body#/customer/id'
              description: >
                The `id` of the customer in the response body can be used as 
                the `customerId` parameter in `DELETE /customer/{customerId}` to delete the customer.
        '404':
          description: 'Not Found'
    put:
      summary: Update a customer
      operationId: updateCustomer
      tags:
        - customers
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  customer:
                    $ref: '#/components/schemas/Customer'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            getCustomerById:
              operationId: getCustomerById
              parameters:
                customerId: '$response.body#/customer/id'
              description: >
                The `id` of the updated customer in the response body can be used as 
                the `customerId` parameter in `GET /customers/{customerId}` to retrieved the updated customer.
        '404':
          description: 'Not Found'
        '422':
          description: 'Validation Error'
    delete:
      summary: Delete a customer
      operationId: deleteCustomer
      tags:
        - customers
      parameters:
        - name: customerId
          description: ID of the customer to delete
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Customer deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Customer deleted successfully."
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            createCustomer:
              operationId: createCustomer
              description: >
                The `createCustomer` operation can be used to create a new customer.
        '404':
          description: Not Found
# Reservations
  /reservations:
    get:
      summary: Get all reservations 
      operationId: getReservationsList
      description: Get all reservations or filter by tour, customer or date
      tags:
        - reservations
      parameters:
        - name: tourId
          in: query
          required: false
          schema:
            type: integer
          description: Tour ID
        - name: customerId
          in: query
          required: false
          schema:
            type: integer
          description: Customer ID
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Reservation date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reservation'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            createReservation:
              operationId: createReservation
              description: >
                The `createReservation` operation can be used to create a new reservation.
            getReservationById:
              operationId: getReservationById
              parameters:
                reservationId: '$response.body#/reservations/0/id'
              description: >
                The `id` of the first reservation in the response body can be used as 
                the `reservationId` parameter in `GET /reservations/{reservationId}` to retrieved the reservation details.
    post:
      summary: Create a reservation
      operationId: createReservation
      tags:
        - reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tourId:
                  type: integer
                customerId:
                  type: integer
              required:
                - tourId
                - customerId
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: ID of the created Reservation.
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            getReservationById:
              operationId: getReservationById
              parameters:
                reservationId: '$response.body#/id'
              description: >
                The `id` of the created reservation in the response body can be used as 
                the `reservationId` parameter in `GET /reservations/{reservationId}` to retrieved the created reservation.
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '406':
          description: Not Acceptable, the tour is fully booked    
  /reservation/{reservationId}:
    get:
      summary: Get a reservation by ID
      operationId: getReservationsListTour
      tags:
        - reservations
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservation:
                    $ref: '#/components/schemas/Reservation'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            updateReservation:
              operationId: updateReservation
              parameters:
                reservationId: '$response.body#/reservation/id'
              description: >
                The `id` of the reservation in the response body can be used as 
                the `reservationId` parameter in `PUT /reservation/{reservationId}` to update the reservation.
            deleteReservation:
              operationId: deleteReservation
              parameters:
                reservationId: '$response.body#/reservation/id'
              description: >
                The `id` of the reservation in the response body can be used as 
                the `reservationId` parameter in `DELETE /reservation/{reservationId}` to delete the reservation.
        '404':
          description: 'Not Found'   
    delete:
      summary: Delete a reservation
      operationId: deleteReservation
      tags:
        - reservations
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Reservation deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Reservation deleted successfully."
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            createReservation:
              operationId: createReservation
              description: >
                The `createReservation` operation can be used to create a new reservation.
        '404':
          description: Not Found
# Locations
  /locations:
    get:
      summary: Get all locations
      operationId: getLocationsList
      tags:
        - locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  locations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Location'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            createLocation:
              operationId: createLocation
              description: >
                The `createLocation` operation can be used to create a new location.
            getLocationById:
              operationId: getLocationById
              parameters:
                locationId: '$response.body#/locations/0/id'
              description: >
                The `id` of the first location in the response body can be used as 
                the `locationId` parameter in `GET /locations/{locationId}` to retrieved the location details.
    post:
      summary: Create a location
      operationId: createLocation
      tags:
        - locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: ID of the created Location.
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            getLocationById:
              operationId: getLocationById
              parameters:
                locationId: '$response.body#/id'
              description: >
                The `id` of the created location in the response body can be used as 
                the `locationId` parameter in `GET /locations/{locationId}` to retrieved the created location.
  /location/{locationId}:
    get:
      summary: Get a location by ID
      operationId: getLocationById
      tags:
        - locations
      parameters:
        - name: locationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    $ref: '#/components/schemas/Location'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            updateLocation:
              operationId: updateLocation
              parameters:
                locationId: '$response.body#/location/id'
              description: >
                The `id` of the location in the response body can be used as 
                the `locationId` parameter in `PUT /location/{locationId}` to update the location.
            deleteLocation:
              operationId: deleteLocation
              parameters:
                locationId: '$response.body#/location/id'
              description: >
                The `id` of the location in the response body can be used as 
                the `locationId` parameter in `DELETE /location/{locationId}` to delete the location.
        '404':
          description: 'Not Found'
    put:
      summary: Update a location by ID
      operationId: updateLocation
      tags:
        - locations
      parameters:
        - name: locationId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    $ref: '#/components/schemas/Location'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            getLocationById:
              operationId: getLocationById
              parameters:
                locationId: '$response.body#/location/id'
              description: >
                The `id` of the updated location in the response body can be used as 
                the `locationId` parameter in `GET /location/{locationId}` to retrieved the updated location.
        '404':
          description: 'Not Found'
        '422':
          description: 'Validation Error'
    delete:
      summary: Delete a location by ID
      operationId: deleteLocation
      tags:
        - locations
      parameters:
        - name: locationId
          description: ID of the location to delete
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Location deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Location deleted successfully."
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            createLocation:
              operationId: createLocation
              description: >
                The `createLocation` operation can be used to create a new location.
        '404':
          description: Not Found
# Countries
  /countries:
    get:
      summary: Get all countries
      operationId: getCountriesList
      tags:
        - countries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  countries:
                    type: array
                    items:
                      $ref: '#/components/schemas/Country'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            createCountry:
              operationId: createCountry
              description: >
                The `createCountry` operation can be used to create a new country.
            getCountryById:
              operationId: getCountryById
              parameters:
                countryId: '$response.body#/countries/0/id'
    post:
      summary: Create a country
      operationId: createCountry
      tags:
        - countries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: ID of the created Country.
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            getCountryById:
              operationId: getCountryById
              parameters:
                countryId: '$response.body#/id'
              description: >
                The `id` of the created country in the response body can be used as 
                the `countryId` parameter in `GET /countries/{countryId}` to retrieved the created country.
  /country/{countryId}:
    get:
      summary: Get a country by ID
      operationId: getCountryById
      tags:
        - countries
      parameters:
        - name: countryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  country:
                    $ref: '#/components/schemas/Country'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            updateCountry:
              operationId: updateCountry
              parameters:
                countryId: '$response.body#/country/id'
        '404':
          description: 'Not Found'
    put:
      summary: Update a country by ID
      operationId: updateCountry
      tags:
        - countries
      parameters:
        - name: countryId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  country:
                    $ref: '#/components/schemas/Country'
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            getCountryById:
              operationId: getCountryById
              parameters:
                countryId: '$response.body#/country/id'
              description: >
                The `id` of the updated country in the response body can be used as 
                the `countryId` parameter in `GET /country/{countryId}` to retrieved the updated country.
        '404':
          description: 'Not Found'
        '422':
          description: 'Validation Error'
    delete:
      summary: Delete a country by ID
      operationId: deleteCountry
      tags:
        - countries
      parameters:
        - name: countryId
          description: ID of the country to delete
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Country deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Country deleted successfully."
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
          links:
            createCountry:
              operationId: createCountry
              description: >
                The `createCountry` operation can be used to create a new country.
        '404':
          description: Not Found

## Components          
components:
  schemas:
    Tour:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        date:
          type: string
          format: date
        availability:
          type: integer
        locationId:
          type: number
          description: Location ID
    Customer:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
    Location:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        countryId:
          type: integer
    Country:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Reservation:
      type: object
      properties:
        id:
          type: integer
        tourId:
          type: integer
        customerId:
          type: integer
        date:
          type: string
          format: date
          description: Reservation date
    Link:
      type: object
      properties:
        rel:
          type: string
        href:
          type: string
      required:
        - rel
        - href
        
